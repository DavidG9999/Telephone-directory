#Импорт библиотеки pandas для работы с датафреймами.
import pandas as pd 

#Бесконечный цикл (для выбора закрыть программу или нет).
while True:
 
 #Блок получения данных.
   
 #Создание датафрейма df с помощью чтения файла "dataForHandbook.txt".
 #Данный датафрейм нужен чтобы изменять данные и записывать их обратно в текстовый файл. 
 #Количество строк, которое можно считать с текстового файла - 50.  
 df: pd.core.frame.DataFrame = pd.read_csv("dataForHandbook.txt", sep=",",nrows=50) 

 #Создание датафрейма new_df с помощью чтения файла "dataForHandbook.txt".
 #Данный датафрейм нужен чтобы отображать данные в консоли.
 #Количество строк, которое можно считать с текстового файла - 50. 
 new_df: pd.core.frame.DataFrame = pd.read_csv("dataForHandbook.txt", sep=",",nrows=50)
 
 #Переменная i нужна для итерации по всему датафрейму.
 i: int = 0 

 #Переменная j используется для присвоения номера каждой страницы выводимого датафрейма. 
 j: int = 1

 #Переменная x нужна для итерации по всему датафрейму.
 #Она используется в последнем цикле while, который заполняет последние строки значением номера страницы j, 
 #где в столбце "Страница" значения равны None.
 x: int = 0
 
 #Создается новый столбец 'Страница' в датафрейме new_df. 
 #Он нужен для вывода данных датафрейма в консоли постранично.
 #Дефолтные значения в данном столбце равны None.
 new_df['Страница'] = None
 
 #Условия с циклом while, которые заполняют столбец 'Страница' номерами страниц(j).
 #Циклы заполняют значением номера страницы(j) каждые последующие 5 строк датафрейма.
 #Таким образом каждая выводимая страница может содержать максимум по 5 строк данных справочника.
 #Условия нужны, чтобы корректно заполнить столбец 'Страница' в зависимости от размера датафрейма.
 #Так, если не использовать условия, в завсимости от размера последняя страница будет содержать более 5 строк датафрейма,
 #или же в конце датафрейма создадутся строки с NaN значениями.
 if len(new_df) <= 4:
  while i < len(new_df) - j - 3:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1

 elif len(new_df) <= 10:
  while i < len(new_df) - j - 2:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1
  
 elif len(new_df) <= 14:
  while i < len(new_df) - j - 1:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1
 
 elif len(new_df) < 25:
  while i < len(new_df)-j:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1
 
 elif len(new_df) < 32:
  while i < len(new_df)-j+1:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1
 
 elif len(new_df) < 37:
  while i < len(new_df)-j+2:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1
 
 elif len(new_df) < 42:
  while i < len(new_df)-j+3:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1 
 
 elif len(new_df) < 47:
  while i < len(new_df)-j+4:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1 
 
 elif len(new_df) <= 50:
  while i < 50 -j:
   new_df.loc[i, 'Страница'] = j
   new_df.loc[i + 1, 'Страница'] = j
   new_df.loc[i + 2, 'Страница'] = j
   new_df.loc[i + 3, 'Страница'] = j
   new_df.loc[i + 4, 'Страница'] = j
   i +=5
   j +=1 
 
 while x < len(new_df):
   if new_df.loc[x, 'Страница'] == None:
     new_df.loc[x, 'Страница'] = j
   x += 1
 

 #Блок функций.
   
 #Функции вывода даных. 
 def print_many_pages (a: int):
     """Функция вывода нескольких страниц подряд.
      
     Данная функция берет в качестве аргумента переменную a
     и выводит в консоли количество страниц справочника подряд, равное переменной a.
     Тип переменной - целое число(int).
     При попытке ввести число большее, чем количество страниц, которые существует, выводится сообщение
     "Такого количества страниц нет в справочнике".
     Иначе запускается цикл while, который в своем случае выводит номера страниц и список данных справочника.
 
     """
     if a > new_df["Страница"].iloc[-1]:
      print("\nТакого количества страниц нет в справочнике\n")
     else:
      i = 1
     print("\n")
     while i <= a:
      print("                                             Страница", i, "\n")
      print(new_df[['Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']][(new_df['Страница'] == i)])
      print("\n")
      i+=1
 
 def print_one_page (a: int):
     """Функция вывода одной страницы.
 
     Данная функция берет в качестве аргумента переменную a
     и выводит в консоли одну страницу справочника, номер которой равен переменной a.
     Тип переменной - целое число(int).
     При попытке ввести число, номера страницы которой не существует, выводится сообщение
     "Страницы (переменная a) нет в справочнике".
     Иначе выводится номер страницы и список данных справочника, которые находятся на этой странице.
 
     """
     if a > new_df["Страница"].iloc[-1]:
      print("\nCтраницы", a ,"нет в справочнике\n")
     else:
      print("\n")
      print("                                             Страница", a, "\n")
      print(new_df[['Фамилия', 'Имя', 'Отчество', 'Название организации',  'Телефон рабочий', 'Телефон личный (сотовый)']][(new_df['Страница'] == a)])
      print("\n")
 
 
 #Функция добавления записи.
 def add_record (a: str , b: str, c: str, d: str, e: int, f: int):
     """Функция добавления записи.
 
     Данная функция берет в качестве аргументов переменные a, b, c, d, e, f.
     Тип переменных a, b, c, d - строки(str).
     Тип переменных e, f - целые числа(int).
     С помощью метода .loc[] значения переменных аргумента добавляются в новую строку в конец датафрейма.
     После датафрейм с новой записью перезаписывается в текстовой файл и выводит в консоли сообщение
     "Новая запись добавлена успешно".
 
     """
     df.loc[len(df)] = [a,b,c,d,e,f]
     df.to_csv('dataForHandbook.txt', index = False)
     print("\nНовая запись добавлена успешно\n")
 
 
 
 #Функция редактирования данных.
 def change_record(a: int, ch1: str, ch2: str, ch3: str, ch4: str, ch5: int, ch6: int):
     """Функция редактирования записи.
 
     Данная функция берет в качестве аргументов переменные a, ch1, ch2, ch3, ch4, ch5, ch6.
     Тип переменных a, ch5, ch6 - целые числа(int).
     Тип переменных ch1, ch2, ch3, ch4 - строки(str).
     С помощью метода .at[], который принимает первым аргументом строку с индексом переменной а
     и вторым аргументом принимает по одному столбцу датафрейма, конкретной ячейке присваевается 
     значение переменных ch1, ch2, ch3, ch4, ch5, ch6.
     Если значения переменных ch1, ch2, ch3, ch4, ch5, ch6 будет равно пустой строке "", 
     то в данной ячейке останется старое значение.
     После датафрейм с отредактированной записью перезаписывается в текстовой файл и выводит в консоли сообщение
     "Запись изменена".
 
     """
     if ch1 == '':
      df.at[a, 'Фамилия'] = df['Фамилия'].loc[a]
     else:
      df.at[a, 'Фамилия'] = ch1
     if ch2 == '':
      df.at[a, 'Имя'] = df['Имя'].loc[a]
     else:
      df.at[a, 'Имя'] = ch2
     if ch3 == '':
      df.at[a, 'Отчество'] = df['Отчество'].loc[a]
     else:
      df.at[a, 'Отчество'] = ch3
     if ch4 == '':
      df.at[a, 'Название организации'] = df['Название организации'].loc[a]
     else:
      df.at[a, 'Название организации'] = ch4
     if ch5 == '':
      df.at[a, 'Телефон рабочий'] = df['Телефон рабочий'].loc[a]
     else:
      df.at[a, 'Телефон рабочий'] = ch5
     if ch6 == '':
      df.at[a, 'Телефон личный (сотовый)'] = df['Телефон личный (сотовый)'].loc[a]  
     else:
      df.at[a, 'Телефон личный (сотовый)'] = ch6
     df.to_csv('dataForHandbook.txt', index = False)
     print("\nЗапись изменена\n")
 
  #Функция поиска данных.
 def srch_rec_by_priv_tel (a: int):
     """Функция поиска данных по личному номеру телефона.
 
     Данная функция берет в качестве аргумента переменную a.
     Тип переменной a - целое число(int).
     Создется новый датафрейм srch_df, который берет только те данные, 
     в которых, в столбце 'Телефон личный (сотовый)', значение равно переменной а.
     Если такого значения нет и создается пустой датафрейм srch_df, то выводится сообщение
     "Записи с таким номером телефона нет в справочнике"
     Иначе выводится сообщение "Найдено записей (количество записей)" и новый датафрейм srch_df.
 
     """
     srch_df = new_df[['Страница','Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']][(new_df['Телефон личный (сотовый)'] == a)]
     if srch_df.empty:
      print("\nЗаписи с таким номером телефона нет в справочнике\n")
     else:
      print("\nНайдено записей",len(srch_df),"\n\n",srch_df,"\n")
 
 def srch_rec_by_publ_tel (a: int):
     """Функция поиска данных по рабочему номеру телефона.
 
     Данная функция берет в качестве аргумента переменную a.
     Тип переменной a - целое число(int).
     Создется новый датафрейм srch_df, который берет только те данные, 
     в которых, в столбце 'Телефон рабочий', значение равно переменной а.
     Если такого значения нет и создается пустой датафрейм srch_df, то выводится сообщение
     "Записи с таким номером телефона нет в справочнике"
     Иначе выводится сообщение "Найдено записей (количество записей)" и новый датафрейм srch_df.
     
     """
     srch_df = new_df[['Страница','Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']][(new_df['Телефон рабочий'] == a)]
     if srch_df.empty:
      print("\nЗаписи с таким номером телефона нет в справочнике\n")
     else:
      print("\nНайдено записей",len(srch_df),"\n\n",srch_df,"\n")
 
 def srch_rec_by_FIO (a: str, b: str, c: str):
     """Функция поиска данных по ФИО.
 
     Данная функция берет в качестве аргументов переменные a, b, c.
     Тип всех переменных  - строки(str).
     Создется новый датафрейм srch_df, который берет только те данные, 
     в которых, в столбцах 'Фамилия', 'Имя', 'Отчество', значения равны переменным а, b и c соответственно.
     Если такого значения нет и создается пустой датафрейм srch_df, то выводится сообщение
     "Записи с таким ФИО нет в справочнике"
     Иначе выводится сообщение "Найдено записей (количество записей)" и новый датафрейм srch_df.
 
     """
     srch_df = new_df[['Страница','Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']].loc[((new_df['Фамилия'] == a) & (new_df['Имя'] == b) & (new_df['Отчество'] == c))]
     if srch_df.empty:
      print("\nЗаписи с таким ФИО нет в справочнике\n")
     else:
      print("\nНайдено записей",len(srch_df),"\n\n",srch_df,"\n")
 
 def srch_rec_by_any_FIO(a: str):
     """Функция поиска данных по либо фамилии, либо имени, либо отчеству.
 
     Данная функция берет в качестве аргумента переменную a.
     Тип переменной a  - строка(str).
     Создется новый датафрейм srch_df, который берет только те данные, 
     в которых, в столбце 'Фамилия' или 'Имя' или 'Отчество', значение равно переменной а.
     Если такого значения нет и создается пустой датафрейм srch_df, то выводится сообщение
     "Записи с такой фамилией(именем, отчеством) нет в справочнике"
     Иначе выводится сообщение "Найдено записей (количество записей)" и новый датафрейм srch_df.
 
     """
     srch_df = new_df[['Страница','Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']].loc[((new_df['Фамилия'] == a) | (new_df['Имя'] == a) | (new_df['Отчество'] == a))]
     if srch_df.empty:
      print("\nЗаписи с такой фамилией(именем, отчеством) нет в справочнике\n")
     else:
      print("\nНайдено записей",len(srch_df),"\n\n",srch_df,"\n")
 
 def srch_rec_by_org (a: str):
     """Функция поиска данных по названию организации.
 
     Данная функция берет в качестве аргумента переменную a.
     Тип переменной a  - строка(str).
     Создется новый датафрейм srch_df, который берет только те данные, 
     в которых, в столбце 'Название организации', значение равно переменной а.
     Если такого значения нет и создается пустой датафрейм srch_df, то выводится сообщение
     "Записи с такой организацией нет в справочнике"
     Иначе выводится сообщение "Найдено записей (количество записей)" и новый датафрейм srch_df.
 
     """
     srch_df = new_df[['Страница','Фамилия', 'Имя', 'Отчество', 'Название организации','Телефон рабочий', 'Телефон личный (сотовый)']][(new_df['Название организации'] == a)]
     if srch_df.empty:
      print("\nЗаписи с такой организацией нет в справочнике\n")
     else:
      print("\nНайдено записей",len(srch_df),"\n\n",srch_df,"\n")
      

 #Блок взаимодействия.

#Интерфейс программы "Телефонный справочник".
#Список команд.
 print("\nТелефонный справочник\n")
 print(" Список команд:")
 print(" 1.Вывод записей.\n",
      "2.Добавить новую запись.\n",
      "3.Изменить запись.\n",
      "4.Поиск записей.\n" )

#Ввод переменной num для выбора нужной команды.
 try:
     num: int = int(input("Введите номер команды - "))
 except ValueError:
      try:
       num = int(input("\nОшибка! Введите целое число - "))
      except ValueError:
       print("\nЗавершение программы!")
       exit()

#Команды вывода. 
 if num == 1:
    print("\n Список команд вывода:")
    print(" 1.Вывод одной страницы.\n",
       "2.Вывод нескольких страниц\n")
    try:
#Ввод переменной num_ptint для выбора нужной команды вывода.
     num_print: int = int(input("Введите номер команды - "))
    except ValueError:
      try:
       num_print = int(input("\nОшибка! Введите целое число - "))
      except ValueError:
       print("\nЗавершение программы!")
       exit()
#Первая команда вывода.
    if num_print == 1:
      try:
#Ввод переменной num_page для выбора нужного номера страницы при выводе одной страницы.
       num_page: int = int(input("Введите номер страницы - "))
      except ValueError:
       try:
        num_page = int(input("\nОшибка! Введите целое число - "))
       except ValueError:
        print("\nЗавершение программы!")
        exit()
#Функция вывода одной страницы.
      print_one_page(num_page)

#Вторая команда вывода.
    elif num_print == 2:
      try:
#Ввод переменной num_pages для выбора нужного количества страниц.
       num_pages: int = int(input("Введите количество страниц - "))
      except ValueError:
       try:
        num_pages = int(input("\nОшибка! Введите целое число - "))
       except ValueError:
        print("\nЗавершение программы!")
        exit()
#Функция вывода нескольких страниц подряд.
      print_many_pages(num_pages)

#Несуществующая команда.
    elif num_print > 2:
       print("\nКоманды под номером",num_print,"не существует\n")

#Команда добавления записи.
 elif num == 2:
    print("\nКоманда добавления записи")
#Ввод переменной firstname для добавления фамилии.
    firstname: str = input("Введите фамилию - ")
    if firstname.isalpha() == False:
      firstname = input("\nОшибка! Вводить можно только буквенные символы. Введите фамилию - ")
      if firstname.isalpha() == False:
        print("\nЗавершение программы!") 
        exit()
#Ввод переменной secondname для добавления имени.
    secondname: str = input("Введите имя - ")
    if secondname.isalpha() == False:
      secondname = input("\nОшибка! Вводить можно только буквенные символы. Введите имя - ")
      if secondname.isalpha() == False:
        print("\nЗавершение программы!")
        exit()
#Ввод переменной lastname для добавления отчества.
    lastname: str = input("Введите отчество - ")
    if lastname.isalpha() == False:
      lastname = input("\nОшибка! Вводить можно только буквенные символы. Введите отчество - ")
      if lastname.isalpha() == False:
        print("\nЗавершение программы!")
        exit()
#Ввод переменной org для добавления организации.
    org: str = input("Введите организацию - ")
#Ввод переменной publ_tel для добавления рабочего телефона.
    publ_tel: int = input("Введите рабочий телефон - ")
    if publ_tel.isalpha() == True:
      publ_tel = input("\nОшибка! Вводить можно только цифры. Введите рабочий телефон - ")
      if publ_tel.isalpha() == True:
        print("\nЗавершение программы!")
        exit()
#Ввод переменной priv_tel для добавления личного телефона.
    priv_tel: int = input("Введите сотовый телефон - ")
    if priv_tel.isalpha() == True:
      priv_tel = input("\nОшибка! Вводить можно только цифры. Введите сотовый телефон - ")
      if priv_tel.isalpha() == True:
        print("\nЗавершение программы!")
        exit()
#Функция добавления.
    add_record(firstname, secondname, lastname, org, publ_tel, priv_tel)

#Команда редактирования записи.
 elif num == 3:
   print("\nКоманда редактирования записи")
#Ввод переменной index для отпределения индекса строки.
   try:
     index: int = int(input("Введите индекс строки, которую хотите редактировать - "))
   except ValueError:
      try:
       index = int(input("\nОшибка! Вводить можно только цифры. Введите индекс -  "))
      except ValueError:
       print("\nЗавершение программы!")
       exit()
#Ввод переменной firstname для редактирования фамилии.
   firstname = input("Введите фамилию - ")
   if firstname == "":
     firstname = firstname
   elif firstname.isalpha() == False:
      firstname = input("\nОшибка! Вводить можно только буквенные символы. Введите фамилию - ")
      if firstname == "":
       firstname = firstname
      elif firstname.isalpha() == False:
        print("\nЗавершение программы!") 
        exit()
#Ввод переменной secondname для редактирования имени.
   secondname = input("Введите имя - ")
   if secondname == "":
     secondname = secondname
   elif secondname.isalpha() == False:
     secondname = input("\nОшибка! Вводить можно только буквенные символы. Введите имя - ")
     if secondname == "":
       secondname = secondname
     elif secondname.isalpha() == False:
       print("\nЗавершение программы!")
       exit()
#Ввод переменной lastname для редактирования отчества.
   lastname = input("Введите отчество - ")
   if lastname == "":
     lastname = lastname
   elif lastname.isalpha() == False:
     lastname = input("\nОшибка! Вводить можно только буквенные символы. Введите отчество - ")
     if lastname == "":
       lastname = lastname
     elif lastname.isalpha() == False:
       print("\nЗавершение программы!")
       exit()
#Ввод переменной org для редактирования организации.
   org = input("Введите организацию - ")
#Ввод переменной publ_tel для редактирования рабочего телефона.
   publ_tel = input("Введите рабочий телефон - ")
   if publ_tel == "":
     publ_tel = publ_tel
   elif publ_tel.isalpha() == False:
     publ_tel = int(publ_tel)
   elif publ_tel.isalpha() == True:
     publ_tel = input("\nОшибка! Вводить можно только цифры. Введите рабочий телефон - ")
     if publ_tel.isalpha() == True:
       print("\nЗавершение программы!")
       exit()
     else: 
      publ_tel = int(publ_tel)
#Ввод переменной priv_tel для редактирования личного телефона.
   priv_tel = input("Введите сотовый телефон - ")
   if priv_tel == "":
     priv_tel = priv_tel
   elif priv_tel.isalpha() == False:
     priv_tel = int(priv_tel)
   elif priv_tel.isalpha() == True:
     priv_tel = input("\nОшибка! Вводить можно только цифры. Введите сотовый телефон - ")
     if priv_tel.isalpha() == True:
       print("\nЗавершение программы!")
       exit()
     else:
      priv_tel = int(priv_tel)
#Функция редактирования.
   change_record(index,firstname, secondname, lastname, org, publ_tel, priv_tel)
    
#Команды поиска данных.
 if num == 4:
    print("\n Список команд поиска:")
    print(" 1.Поиск по рабочему номеру.\n",
       "2.Поиск по личному номеру\n",
       "3.Поиск по ФИО.\n",
       "4.Поиск либо по фамилии, либо по имени, либо по отчеству.\n",
       "5.Поиск по организации.\n")
    try:
#Ввод переменной num_srch для выбора нужной команды поиска.
     num_srch: int = int(input("Введите номер команды - "))
    except ValueError:
      try:
       num_srch = int(input("\nОшибка! Введите целое число - "))
      except ValueError:
       print("\nЗавершение программы!")
       exit()
#Первая команда поиска.
    if num_srch == 1:
      try:
#Ввод переменной num_tel для поиска данных по рабочему номеру телефона.
       num_tel: int = int(input("Введите номер телефона - "))
      except ValueError:
       try:
        num_tel = int(input("\nОшибка! Номер состоит только из цифр. Введите номер повторно - "))
       except ValueError:
        print("\nЗавершение программы!")
        exit()
#Функция поиска данных по рабочему номеру телефона.
      srch_rec_by_publ_tel(num_tel)

#Вторая команда поиска.
    elif num_srch == 2:
      try:
#Ввод переменной num_telp для поиска данных по личному номеру телефона.
       num_telp: int = int(input("Введите номер телефона - "))
      except ValueError:
       try:
        num_telp = int(input("\nОшибка! Номер состоит только из цифр. Введите номер повторно - "))
       except ValueError:
        print("\nЗавершение программы!")
        exit()
#Функция поиска данных по личному номеру телефона.
      srch_rec_by_priv_tel(num_telp)

#Третья команда поиска.
    if num_srch == 3:
#Ввод переменной firstname для поиска данных по фамилии.
     firstname = input("Введите фамилию - ")
     if firstname.isalpha() == False:
       firstname = input("\nОшибка! Вводить можно только буквенные символы. Введите фамилию - ")
       if firstname.isalpha() == False:
        print("\nЗавершение программы!") 
        exit()
#Ввод переменной secondname для поиска данных по имени.
     secondname = input("Введите имя - ")
     if secondname.isalpha() == False:
      secondname = input("\nОшибка! Вводить можно только буквенные символы. Введите имя - ")
      if secondname.isalpha() == False:
       print("\nЗавершение программы!")
       exit()
#Ввод переменной lastname для поиска данных по отчеству.
     lastname = input("Введите отчество - ")
     if lastname.isalpha() == False:
      lastname = input("\nОшибка! Вводить можно только буквенные символы. Введите отчество - ")
      if lastname.isalpha() == False:
       print("\nЗавершение программы!")
       exit()
#Функция поиска данных по ФИО.
     srch_rec_by_FIO(firstname, secondname, lastname)

#Четвертая команда поиска.
    elif num_srch == 4:
#Ввод переменной name для поиска данных по отчеству либо фамилии, либо имени.
     name: str = input("\nВведите фамилию(имя, отчество) - ")
     if name.isalpha() == False:
       name = input("\nОшибка! Вводить можно только буквенные символы. фамилию(имя, отчество) - ")
       if name.isalpha() == False:
        print("\nЗавершение программы!") 
        exit()
#Функция поиска данных по фамилии(имени, отчеству).
     srch_rec_by_any_FIO(name)

#Пятая команда поиска.
    elif num_srch == 5:
#Ввод переменной org для поиска данных по названию организации.
     org = input("Введите организацию - ")
#Функция поиска данных по организации.
     srch_rec_by_org(org)

#Несуществующая команда.
    elif num_srch > 5:
       print("\nКоманды под номером",num_srch,"не существует\n")

#Внещняя несуществующая команда.
 elif num > 4:
       print("\nКоманды под номером",num,"не существует\n")

#Переменная response для выбора: продолжить бесконечный цикл (продолжить програму) или прервать цикл (закрыть программу).
 response: str = input("Хотите продолжить? (да/нет): ")
 if response.lower() != "да":
   print("\nЗакрытие програмы.")
   break
